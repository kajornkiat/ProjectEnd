CREATE TABLE users (
    id SERIAL PRIMARY KEY,                   
    username VARCHAR(20) NOT NULL UNIQUE,   
    password VARCHAR(255) NOT NULL, 
    status VARCHAR(10) DEFAULT 'user',        
    email VARCHAR(255) NOT NULL UNIQUE,     
    fullname VARCHAR(255) NOT NULL,         
    profile_image TEXT,                     
    background_image TEXT,                  
    gender VARCHAR(10),                     
    birthdate DATE,                         
    created_at TIMESTAMP DEFAULT (NOW() AT TIME ZONE 'Asia/Bangkok') 
);

CREATE TABLE friends (
    id SERIAL PRIMARY KEY,
    sender_id INT REFERENCES users(id) ON DELETE CASCADE,  
    receiver_id INT REFERENCES users(id) ON DELETE CASCADE, 
    friend_status VARCHAR(10) DEFAULT 'pending',  
    created_at TIMESTAMP DEFAULT (NOW() AT TIME ZONE 'Asia/Bangkok')
);

CREATE OR REPLACE FUNCTION delete_messages_after_unfriend()
RETURNS TRIGGER AS $$
BEGIN
    DELETE FROM messages 
    WHERE (sender_id = OLD.sender_id AND receiver_id = OLD.receiver_id) 
       OR (sender_id = OLD.receiver_id AND receiver_id = OLD.sender_id);
    RETURN OLD;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER trigger_delete_messages
AFTER DELETE ON friends
FOR EACH ROW
EXECUTE FUNCTION delete_messages_after_unfriend();

CREATE TABLE messages (
    id SERIAL PRIMARY KEY,
    sender_id INT REFERENCES users(id) ON DELETE CASCADE,
    receiver_id INT REFERENCES users(id) ON DELETE CASCADE,
    message TEXT,  
    message_type VARCHAR(10) CHECK (message_type IN ('text', 'image')), -- ประเภทของข้อความ
    created_at TIMESTAMP DEFAULT (NOW() AT TIME ZONE 'Asia/Bangkok'),
    is_unread BOOLEAN DEFAULT true
);

CREATE TABLE post (
    post_id SERIAL PRIMARY KEY,            
    user_id INTEGER NOT NULL,             
    province VARCHAR(100) NOT NULL,        
    description TEXT,                      
    images TEXT[],                            
    date TIMESTAMP DEFAULT (NOW() AT TIME ZONE 'Asia/Bangkok'),  
    CONSTRAINT fk_user
        FOREIGN KEY (user_id)             
        REFERENCES users (id)
        ON DELETE CASCADE                  
        ON UPDATE CASCADE
);

CREATE TABLE food (
    id SERIAL PRIMARY KEY,                   
    province VARCHAR(255) NOT NULL,          
    name VARCHAR(255) NOT NULL,              
    images TEXT[];,                              
    description TEXT,                        
    latitude FLOAT NOT NULL,
    longitude FLOAT NOT NULL,
    price VARCHAR(255), 
    phone VARCHAR(20), 
    placetyp VARCHAR(255)          
);

CREATE TABLE hotel (
    id SERIAL PRIMARY KEY,                   
    province VARCHAR(255) NOT NULL,          
    name VARCHAR(255) NOT NULL,              
    image TEXT,                              
    description TEXT,                        
    latitude FLOAT NOT NULL,
    longitude FLOAT NOT NULL          
);

CREATE TABLE tourist (
    id SERIAL PRIMARY KEY,                    
    province VARCHAR(255) NOT NULL,          
    name VARCHAR(255) NOT NULL,              
    image TEXT,                              
    description TEXT,                        
    latitude FLOAT NOT NULL,
    longitude FLOAT NOT NULL                
);

CREATE TABLE comment (
    comment_id SERIAL PRIMARY KEY,
    post_id INTEGER NOT NULL,
    user_comment_id INTEGER NOT NULL,
    comment TEXT NOT NULL,
    date TIMESTAMP DEFAULT (NOW() AT TIME ZONE 'Asia/Bangkok'),

    CONSTRAINT fk_post
        FOREIGN KEY (post_id) REFERENCES post (post_id)
        ON DELETE CASCADE ON UPDATE CASCADE,

    CONSTRAINT fk_user_comment
        FOREIGN KEY (user_comment_id) REFERENCES users (id)
        ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE reviews (
    id SERIAL PRIMARY KEY,
    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE, 
    category VARCHAR(10) CHECK (category IN ('food', 'hotel', 'tourist')) NOT NULL,
    place_id INTEGER NOT NULL,  
    review TEXT NOT NULL,  
    rating INTEGER CHECK (rating BETWEEN 1 AND 5), 
    created_at TIMESTAMP DEFAULT (NOW() AT TIME ZONE 'Asia/Bangkok')
);
CREATE OR REPLACE FUNCTION check_place_id()
RETURNS TRIGGER AS $$
BEGIN
    IF NEW.category = 'food' AND NOT EXISTS (SELECT 1 FROM food WHERE id = NEW.place_id) THEN
        RAISE EXCEPTION 'place_id ไม่พบใน food';
    ELSIF NEW.category = 'hotel' AND NOT EXISTS (SELECT 1 FROM hotel WHERE id = NEW.place_id) THEN
        RAISE EXCEPTION 'place_id ไม่พบใน hotel';
    ELSIF NEW.category = 'tourist' AND NOT EXISTS (SELECT 1 FROM tourist WHERE id = NEW.place_id) THEN
        RAISE EXCEPTION 'place_id ไม่พบใน tourist';
    END IF;
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;
CREATE TRIGGER enforce_place_id
BEFORE INSERT OR UPDATE ON reviews
FOR EACH ROW
EXECUTE FUNCTION check_place_id();

