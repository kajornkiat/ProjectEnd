// Login Endpoint
app.post('/api/login', async (req, res) => {
    const { username, password } = req.body;
    const query = 'SELECT id, password FROM users WHERE username = $1';
    try {
        const result = await pool.query(query, [username]);
        if (result.rows.length > 0) {
            const user = result.rows[0];
            const validPassword = await bcrypt.compare(password, user.password);
            if (validPassword) {
                const token = jwt.sign({ id: user.id }, SECRET_KEY, { expiresIn: '1h' });
                res.json({ id: user.id, token });
            } else {
                res.status(401).json({ error: 'Invalid username or password' });
            }
        } else {
            res.status(401).json({ error: 'Invalid username or password' });
        }
    } catch (err) {
        console.error(err);
        res.status(500).json({ error: 'Server error' });
    }
});

// Profile Endpoint
app.get('/profile/:id', authenticateToken, async (req, res) => {
    const { id } = req.params;
    try {
        const result = await pool.query('SELECT * FROM users WHERE id = $1', [id]);
        if (result.rows.length > 0) {
            res.status(200).json(result.rows[0]);
        } else {
            res.status(404).json({ error: 'Profile not found' });
        }
    } catch (error) {
        console.error('Database error:', error);
        res.status(500).json({ error: 'Internal server error' });
    }
});

// Serve uploaded files
app.use('/uploads', express.static(path.join(__dirname, 'uploads')));

// Upload Profile Image
const storage = multer.diskStorage({
    destination: './uploads/',
    filename: (req, file, cb) => {
        cb(null, Date.now() + path.extname(file.originalname));
    },
});
const upload = multer({ storage });

app.post('/profile', upload.fields([{ name: 'profile_image' }, { name: 'background_image' }]), authenticateToken, async (req, res) => {
    const { name, id: userId } = req.body;

    if (!userId) {
        return res.status(400).json({ message: 'User ID is required' });
    }

    try {
        const currentUserResult = await pool.query('SELECT * FROM users WHERE id = $1', [userId]);
        if (currentUserResult.rows.length === 0) {
            return res.status(404).json({ message: 'User not found' });
        }
        const currentUser = currentUserResult.rows[0];

        const updatedName = name || currentUser.fullname;
        const updatedProfileImage = req.files['profile_image']
            ? `/uploads/${req.files['profile_image'][0].filename}`
            : currentUser.profile_image;
        const updatedBackgroundImage = req.files['background_image']
            ? `/uploads/${req.files['background_image'][0].filename}`
            : currentUser.background_image;

        const result = await pool.query(
            `UPDATE users SET fullname = $1, profile_image = $2, background_image = $3 WHERE id = $4 RETURNING *`,
            [updatedName, updatedProfileImage, updatedBackgroundImage, userId]
        );

        res.json({
            message: 'Profile updated successfully',
            profile: result.rows[0],
        });
    } catch (err) {
        res.status(500).json({ error: err.message });
    }
});

// 🔎 API ค้นหาผู้ใช้ตาม fullname
app.get("/api/users/search", async (req, res) => {
    try {
        const { fullname } = req.query;
        const query = `
        SELECT id, username, fullname, profile_image 
        FROM users 
        WHERE LOWER(fullname) LIKE LOWER($1) 
        LIMIT 10
      `;
        const users = await pool.query(query, [`%${fullname}%`]);
        res.json(users.rows);
    } catch (error) {
        console.error(error.message);
        res.status(500).send("Server error");
    }
});

// 📄 API ดึงข้อมูลเพื่อนที่เลือก
app.get("/api/users/:id", async (req, res) => {
    try {
        const { id } = req.params;
        const user = await pool.query(
            "SELECT id, username, fullname, profile_image, background_image, email FROM users WHERE id = $1",
            [id]
        );
        if (user.rows.length === 0) return res.status(404).json({ msg: "User not found" });
        res.json(user.rows[0]);
    } catch (error) {
        console.error(error.message);
        res.status(500).send("Server error");
    }
});