const express = require('express');
const http = require('http');
const { Server } = require('socket.io');
const bodyParser = require('body-parser');
const bcrypt = require("bcryptjs");
const { Pool } = require('pg');
const cors = require('cors');
const multer = require('multer');
const path = require('path');
const jwt = require('jsonwebtoken');
const fs = require('fs');
require("dotenv").config();

const app = express();
const server = http.createServer(app); // สร้างเซิร์ฟเวอร์ HTTP
const io = new Server(server, {
    cors: { origin: '*' } // อนุญาตทุก origin
});

const port = 3000;

const pool = new Pool({
    user: 'user',
    host: 'db',
    database: 'mydb',
    password: 'mosswn1234',
    port: 5432,
});

const SECRET_KEY = 'your-secret-key'; // กำหนด SECRET_KEY สำหรับ JWT

app.use(bodyParser.json());
app.use(cors({
    origin: '*',
    methods: 'GET,POST,DELETE',
    credentials: true
}));


// Middleware สำหรับตรวจสอบ token
const authenticateToken = (req, res, next) => {
    const authHeader = req.headers['authorization'];
    const token = authHeader && authHeader.split(' ')[1];
    if (!token) {
        return res.status(401).json({ error: "No token provided" });
    }

    jwt.verify(token, SECRET_KEY, (err, user) => {
        if (err) {
            console.error("JWT verification failed:", err);
            return res.status(403).json({ error: "Invalid token" });
        }
        req.user = user;
        console.log("Authenticated User:", user);
        next();
    });
};


// Login Endpoint
app.post('/api/login', async (req, res) => {
    const { username, password } = req.body;
    const query = 'SELECT id, password FROM users WHERE username = $1';
    try {
        const result = await pool.query(query, [username]);
        if (result.rows.length > 0) {
            const user = result.rows[0];
            const validPassword = await bcrypt.compare(password, user.password);
            if (validPassword) {
                const token = jwt.sign({ id: user.id }, SECRET_KEY, { expiresIn: '1h' });
                res.json({ id: user.id, token });
            } else {
                res.status(401).json({ error: 'Invalid username or password' });
            }
        } else {
            res.status(401).json({ error: 'Invalid username or password' });
        }
    } catch (err) {
        console.error(err);
        res.status(500).json({ error: 'Server error' });
    }
});

// Profile Endpoint
app.get('/profile/:id', authenticateToken, async (req, res) => {
    const { id } = req.params;
    try {
        const result = await pool.query('SELECT * FROM users WHERE id = $1', [id]);
        if (result.rows.length > 0) {
            res.status(200).json(result.rows[0]);
        } else {
            res.status(404).json({ error: 'Profile not found' });
        }
    } catch (error) {
        console.error('Database error:', error);
        res.status(500).json({ error: 'Internal server error' });
    }
});

// Serve uploaded files
app.use('/uploads', express.static(path.join(__dirname, 'uploads')));

// Upload Profile Image
const storage = multer.diskStorage({
    destination: './uploads/',
    filename: (req, file, cb) => {
        cb(null, Date.now() + path.extname(file.originalname));
    },
});
const upload = multer({ storage });

app.post('/profile', upload.fields([{ name: 'profile_image' }, { name: 'background_image' }]), authenticateToken, async (req, res) => {
    const { name, id: userId } = req.body;

    if (!userId) {
        return res.status(400).json({ message: 'User ID is required' });
    }

    try {
        const currentUserResult = await pool.query('SELECT * FROM users WHERE id = $1', [userId]);
        if (currentUserResult.rows.length === 0) {
            return res.status(404).json({ message: 'User not found' });
        }
        const currentUser = currentUserResult.rows[0];

        const updatedName = name || currentUser.fullname;
        const updatedProfileImage = req.files['profile_image']
            ? `/uploads/${req.files['profile_image'][0].filename}`
            : currentUser.profile_image;
        const updatedBackgroundImage = req.files['background_image']
            ? `/uploads/${req.files['background_image'][0].filename}`
            : currentUser.background_image;

        const result = await pool.query(
            `UPDATE users SET fullname = $1, profile_image = $2, background_image = $3 WHERE id = $4 RETURNING *`,
            [updatedName, updatedProfileImage, updatedBackgroundImage, userId]
        );

        res.json({
            message: 'Profile updated successfully',
            profile: result.rows[0],
        });
    } catch (err) {
        res.status(500).json({ error: err.message });
    }
});

//add_freinds
// 🔎 API ค้นหาผู้ใช้ตาม fullname
app.get("/api/users/search", async (req, res) => {
    try {
        const { fullname } = req.query;
        const query = `
        SELECT id, fullname, profile_image, background_image
        FROM users 
        WHERE LOWER(fullname) LIKE LOWER($1) 
        LIMIT 10
      `;
        const users = await pool.query(query, [`%${fullname}%`]);
        res.json(users.rows);
    } catch (error) {
        console.error(error.message);
        res.status(500).send("Server error");
    }
});

//API ส่งคำขอเป็นเพื่อน
app.post('/api/friends/request', async (req, res) => {
    const { sender_id, receiver_id } = req.body;

    try {
        const existingRequest = await pool.query(
            'SELECT * FROM friends WHERE sender_id = $1 AND receiver_id = $2',
            [sender_id, receiver_id]
        );

        if (existingRequest.rows.length > 0) {
            return res.status(400).json({ message: 'Request already sent' });
        }

        await pool.query(
            'INSERT INTO friends (sender_id, receiver_id, status) VALUES ($1, $2, $3)',
            [sender_id, receiver_id, 'pending']
        );
        res.json({ message: 'Friend request sent' });

    } catch (error) {
        res.status(500).json({ error: error.message });
    }
});

//API ยอมรับคำขอเป็นเพื่อน
app.put('/api/friends/accept', async (req, res) => {
    const { sender_id, receiver_id } = req.body;

    try {
        await pool.query(
            'UPDATE friends SET status = $1 WHERE sender_id = $2 AND receiver_id = $3',
            ['accepted', sender_id, receiver_id]
        );
        res.json({ message: 'Friend request accepted' });

    } catch (error) {
        res.status(500).json({ error: error.message });
    }
});

//API เช็กสถานะเพื่อน
app.get('/api/friends/status', async (req, res) => {
    const { user_id, friend_id } = req.query;

    try {
        const result = await pool.query(
            'SELECT status FROM friends WHERE (sender_id = $1 AND receiver_id = $2) OR (sender_id = $2 AND receiver_id = $1)',
            [user_id, friend_id]
        );

        if (result.rows.length > 0) {
            res.json({ status: result.rows[0].status });
        } else {
            res.json({ status: 'none' });
        }

    } catch (error) {
        res.status(500).json({ error: error.message });
    }
});

// API ดึงรายการคำขอเป็นเพื่อนของ receiver
app.get('/api/friends/requests', async (req, res) => {
    const { receiver_id } = req.query;

    try {
        const query = `
            SELECT u.id, u.fullname, u.profile_image, u.background_image
            FROM friends f
            JOIN users u ON f.sender_id = u.id
            WHERE f.receiver_id = $1 AND f.status = 'pending'
        `;
        const result = await pool.query(query, [receiver_id]);

        res.json(result.rows);
    } catch (error) {
        res.status(500).json({ error: error.message });
    }
});

// API ลบคำขอเป็นเพื่อน
app.delete('/api/friends/delete', async (req, res) => {
    const { sender_id, receiver_id } = req.body;

    try {
        await pool.query(
            'DELETE FROM friends WHERE sender_id = $1 AND receiver_id = $2',
            [sender_id, receiver_id]
        );
        res.json({ message: 'Friend request deleted' });

    } catch (error) {
        res.status(500).json({ error: error.message });
    }
});

// API ดึงจำนวนคำขอเป็นเพื่อนที่ pending
app.get('/api/friends/pending/count', async (req, res) => {
    const { user_id } = req.query;

    try {
        const { rows } = await pool.query(
            "SELECT COUNT(*) FROM friends WHERE receiver_id = $1 AND status = 'pending'",
            [user_id]
        );

        res.json({ count: parseInt(rows[0].count, 10) });
    } catch (error) {
        console.error('Error fetching friend requests count:', error);
        res.status(500).json({ error: 'Internal Server Error' });
    }
});

//api chat
app.get('/api/friends/search', async (req, res) => {
    const { userId, query } = req.query;

    if (!query) {
        return res.status(400).json({ error: 'Query is required' });
    }

    try {
        const searchQuery = `
            SELECT u.id, u.fullname, u.profile_image
            FROM users u
            JOIN friends f ON 
                (f.sender_id = u.id AND f.receiver_id = $1) OR
                (f.receiver_id = u.id AND f.sender_id = $1)
            WHERE u.fullname ILIKE $2 AND u.id != $1 AND f.status = 'accepted'
            ORDER BY u.fullname;
        `;

        const result = await pool.query(searchQuery, [userId, `%${query}%`]);
        res.status(200).json(result.rows);
    } catch (error) {
        console.error('Error searching friends:', error);
        res.status(500).json({ error: 'Server error' });
    }
});

//api messasge
io.on("connection", (socket) => {
    console.log("User connected:", socket.id);

    socket.on("joinRoom", (userId) => {
        socket.join(`user_${userId}`);
        console.log(`User ${userId} joined room user_${userId}`);
    });

    socket.on("sendMessage", async ({ senderId, receiverId, message }) => {
        try {
            const insertQuery = `
                INSERT INTO messages (sender_id, receiver_id, message)
                VALUES ($1, $2, $3) RETURNING *;
            `;
            const result = await pool.query(insertQuery, [senderId, receiverId, message]);
            const newMessage = result.rows[0];

            io.to(`user_${receiverId}`).emit("receiveMessage", newMessage);
            io.to(`user_${senderId}`).emit("receiveMessage", newMessage);
        } catch (error) {
            console.error("Error sending message:", error);
        }
    });

    socket.on("disconnect", () => {
        console.log("User disconnected:", socket.id);
    });
});


//api เพื่อนที่เคยแชทกัน
app.get('/api/chat/history', async (req, res) => {
    const { userId } = req.query;

    const query = `
        SELECT DISTINCT ON (LEAST(m.sender_id, m.receiver_id), GREATEST(m.sender_id, m.receiver_id)) 
            u.id AS friend_id, 
            u.fullname, 
            u.profile_image, 
            m.message, 
            m.created_at
        FROM messages m
        JOIN users u ON (u.id = m.sender_id OR u.id = m.receiver_id)
        WHERE (m.sender_id = $1 OR m.receiver_id = $1) AND u.id != $1
        ORDER BY LEAST(m.sender_id, m.receiver_id), GREATEST(m.sender_id, m.receiver_id), m.created_at DESC;
    `;

    try {
        const result = await pool.query(query, [userId]);
        res.status(200).json(result.rows);
    } catch (error) {
        console.error("Error fetching chat history:", error);
        res.status(500).json({ error: "Server error" });
    }
});



server.listen(port, () => {
    console.log(`Server running on port ${port}`);
});
