//food
const foodStorage = multer.diskStorage({
    destination: path.join(__dirname, 'foodimage'), // Save files to foodimage folder
    filename: (req, file, cb) => {
        cb(null, Date.now() + '-' + Math.round(Math.random() * 1000) + path.extname(file.originalname));
    },
});

const foodUpload = multer({ storage: foodStorage });

// ✅ อัปเดตให้รองรับการอัปโหลดรูปสูงสุด 5 รูป
app.post('/api/food', foodUpload.array('images', 5), async (req, res) => {
    const { province, name, description, latitude, longitude } = req.body;

    if (!province || !name || !latitude || !longitude) {
        return res.status(400).json({ error: 'Province, Name, latitude, and longitude are required.' });
    }

    // ดึง path ของรูปทั้งหมดที่อัปโหลด
    const imagePaths = req.files.map(file => `/foodimage/${file.filename}`);

    try {
        const result = await pool.query(
            `INSERT INTO food (province, name, images, description, latitude, longitude) 
            VALUES ($1, $2, $3, $4, $5, $6) RETURNING *`,
            [province, name, imagePaths, description, latitude, longitude]
        );
        res.status(201).json(result.rows[0]);
    } catch (error) {
        res.status(500).json({ error: error.message });
    }
});

app.get('/api/food', async (req, res) => {
    try {
        const { province, name } = req.query; // ดึงค่าที่ใช้ค้นหา
        let query = 'SELECT * FROM food';
        let conditions = [];
        let values = [];

        // เพิ่มเงื่อนไขการค้นหา
        if (province) {
            conditions.push(`LOWER(province) LIKE $${values.length + 1}`);
            values.push(`%${province.toLowerCase()}%`);
        }
        if (name) {
            conditions.push(`LOWER(name) LIKE $${values.length + 1}`);
            values.push(`%${name.toLowerCase()}%`);
        }

        if (conditions.length > 0) {
            query += ' WHERE ' + conditions.join(' OR '); // ใช้ OR เพื่อให้ค้นหาได้ทั้ง 2 ฟิลด์
        }

        // ดึงข้อมูลจาก PostgreSQL
        const result = await pool.query(query, values);
        let foodData = result.rows;

        // คำนวณค่าเฉลี่ย rating และจำนวนรีวิวสำหรับแต่ละ food
        for (let i = 0; i < foodData.length; i++) {
            const food = foodData[i];

            // คำนวณค่าเฉลี่ย rating และจำนวนรีวิวสำหรับ food
            const statsQuery = await pool.query(
                `SELECT COALESCE(AVG(rating), 0) AS average_rating, COUNT(*) AS review_count 
                 FROM reviews 
                 WHERE category = 'food' AND place_id = $1`,
                [food.id]
            );

            food.averageRating = parseFloat(statsQuery.rows[0].average_rating);
            food.reviewCount = parseInt(statsQuery.rows[0].review_count);
        }

        // **เรียงลำดับข้อมูล**: ตรงมากที่สุดขึ้นก่อน
        foodData.sort((a, b) => {
            let scoreA = (province && a.province.toLowerCase().startsWith(province.toLowerCase()) ? 1 : 0) +
                (name && a.name.toLowerCase().startsWith(name.toLowerCase()) ? 1 : 0);
            let scoreB = (province && b.province.toLowerCase().startsWith(province.toLowerCase()) ? 1 : 0) +
                (name && b.name.toLowerCase().startsWith(name.toLowerCase()) ? 1 : 0);
            return scoreB - scoreA; // เรียงจากคะแนนมากไปน้อย
        });

        // ตรวจสอบให้แน่ใจว่ามีข้อมูล latitude และ longitude
        foodData = foodData.map(food => ({
            ...food,
            latitude: food.latitude || 0.0,
            longitude: food.longitude || 0.0
        }));

        res.json(foodData);
    } catch (err) {
        console.error(err.message);
        res.status(500).send('Server Error');
    }
});

app.use('/foodimage', express.static(path.join(__dirname, 'foodimage')));